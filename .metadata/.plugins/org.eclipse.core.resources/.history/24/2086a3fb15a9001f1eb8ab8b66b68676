package controllers;

import java.net.URL;

import dao.UserLoginDao;
import models.UserLogin;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

public class UserLoginController {

    @FXML private TextField emailField;
    @FXML private PasswordField passwordField;
    @FXML private TextField firstNameField;
    @FXML private TextField lastNameField;
    @FXML private PasswordField confirmPasswordField;
    @FXML private TextField phoneNumberField;
    @FXML private TextField addressField;
    @FXML private ComboBox<String> securityQuestionBox;
    @FXML private TextField securityAnswerField;
    @FXML private PasswordField newPasswordField;

    private UserLoginDao userDao;

    public UserLoginController() {
        this.userDao = new UserLoginDao();
    }

    @FXML
    protected void handleLogin(ActionEvent event) {
        try {
            String email = emailField.getText();
            String password = passwordField.getText();

            UserLogin user = userDao.findByEmail(email);

            if (user != null && user.getPassword().equals(password)) {
                if (user.getRole().equals("admin")) {
                    // Load admin view
                    loadView("/views/AdminView.fxml", event);
                } else {
                    // Load regular user view
                    loadView("/views/UserDashboard.fxml", event);
                }
            } else {
                showAlert(Alert.AlertType.ERROR, "Login Error", "Invalid credentials");
            }
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Login failed: " + e.getMessage());
        }
    }

    @FXML
    protected void showRegisterView(ActionEvent event) throws Exception {
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        URL location = getClass().getResource("/views/RegisterView.fxml");
        if (location == null) {
            throw new Exception("RegisterView.fxml not found in resources");
        }
        Parent root = FXMLLoader.load(location);
        stage.setScene(new Scene(root));
        stage.show();
    }

    @FXML
    protected void showForgotPasswordView(ActionEvent event) throws Exception {
        try {
            Stage stage = (Stage) ((Hyperlink) event.getSource()).getScene().getWindow();
            URL location = getClass().getResource("/views/ForgotPasswordView.fxml");
            if (location == null) {
                throw new Exception("Cannot find ForgotPasswordView.fxml");
            }
            Parent root = FXMLLoader.load(location);
            stage.setScene(new Scene(root));
            stage.show();
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Navigation Error", 
                "Could not load forgot password view: " + e.getMessage());
        }
    }
        
        @FXML
        protected void handleRegister(ActionEvent event) {
            try {
                // Get values from form fields
                String firstName = firstNameField.getText();
                String lastName = lastNameField.getText();
                String email = emailField.getText();
                String password = passwordField.getText();
                String confirmPassword = confirmPasswordField.getText();
                String phoneNumber = phoneNumberField.getText();
                String address = addressField.getText();
                String securityQuestion = securityQuestionBox.getValue();
                String securityAnswer = securityAnswerField.getText();

                // Input validation
                if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || 
                    password.isEmpty() || confirmPassword.isEmpty() || phoneNumber.isEmpty() || 
                    address.isEmpty() || securityQuestion == null || securityAnswer.isEmpty()) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", "All fields are required!");
                    return;
                }

                // Validate email format
                if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", "Invalid email format!");
                    return;
                }

                // Validate password match
                if (!password.equals(confirmPassword)) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", "Passwords do not match!");
                    return;
                }

                // Validate password strength
                if (!password.matches("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$")) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", 
                        "Password must be at least 8 characters long and contain both letters and numbers!");
                    return;
                }

                // Validate phone number format
                if (!phoneNumber.matches("\\d{10}")) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", "Phone number must be 10 digits!");
                    return;
                }

                // Check if user already exists
                if (userDao.findByEmail(email) != null) {
                    showAlert(Alert.AlertType.ERROR, "Registration Error", "Email already registered!");
                    return;
                }

                // Create new user
                UserLogin newUser = new UserLogin();
                newUser.setFirstName(firstName);
                newUser.setLastName(lastName);
                newUser.setEmail(email);
                newUser.setPassword(password);
                newUser.setPhoneNumber(phoneNumber);
                newUser.setStreetAddress(address);
                newUser.setSecurityQuestion(securityQuestion);
                newUser.setSecurityAnswer(securityAnswer);

                // Save user to database
                boolean success = userDao.save(newUser);

                if (success) {
                    showAlert(Alert.AlertType.INFORMATION, "Success", "Registration successful!");
                    // Navigate to login view
                    loadView("/views/LoginView.fxml", event);
                } else {
                    showAlert(Alert.AlertType.ERROR, "Error", "Failed to register user!");
                }

            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Error", "An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }

        private void showAlert(Alert.AlertType type, String title, String content) {
            Alert alert = new Alert(type);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(content);
            alert.showAndWait();
        }

        private void loadView(String fxmlPath, ActionEvent event) throws Exception {
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));
            stage.setScene(new Scene(root));
            stage.show();    
    }
        
        @FXML
        protected void handlePasswordReset(ActionEvent event) {
            try {
                String email = emailField.getText();
                String securityQuestion = securityQuestionBox.getValue();
                String securityAnswer = securityAnswerField.getText();
                String newPassword = newPasswordField.getText();

                // Input validation
                if (email.isEmpty() || securityQuestion == null || 
                    securityAnswer.isEmpty() || newPassword.isEmpty()) {
                    showAlert(Alert.AlertType.ERROR, "Reset Error", "All fields are required!");
                    return;
                }

                // Validate email format
                if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                    showAlert(Alert.AlertType.ERROR, "Reset Error", "Invalid email format!");
                    return;
                }

                // Validate password strength
                if (!newPassword.matches("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$")) {
                    showAlert(Alert.AlertType.ERROR, "Reset Error", 
                        "Password must be at least 8 characters long and contain both letters and numbers!");
                    return;
                }

                // Find user by email
                UserLogin user = userDao.findByEmail(email);
                if (user == null) {
                    showAlert(Alert.AlertType.ERROR, "Reset Error", "Email not found!");
                    return;
                }

                // Verify security question and answer
                if (!user.getSecurityQuestion().equals(securityQuestion) || 
                    !user.getSecurityAnswer().equals(securityAnswer)) {
                    showAlert(Alert.AlertType.ERROR, "Reset Error", 
                        "Security question or answer is incorrect!");
                    return;
                }

                // Update password
                user.setPassword(newPassword);
                boolean success = userDao.update(user);

                if (success) {
                    showAlert(Alert.AlertType.INFORMATION, "Success", 
                        "Password has been reset successfully!");
                    // Navigate back to login view
                    loadView("/views/LoginView.fxml", event);
                } else {
                    showAlert(Alert.AlertType.ERROR, "Error", 
                        "Failed to reset password. Please try again.");
                }

            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "System Error", 
                    "An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }

        private void showAlertone(Alert.AlertType type, String title, String content) {
            Alert alert = new Alert(type);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(content);
            alert.showAndWait();
        }

        private void loadViewone(String fxmlPath, ActionEvent event) throws Exception {
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));
            stage.setScene(new Scene(root));
            stage.show();
        }
        
        @FXML
        protected void showLoginView(ActionEvent event) throws Exception {
            try {
                Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                URL location = getClass().getResource("/views/LoginView.fxml");
                if (location == null) {
                    throw new Exception("Cannot find LoginView.fxml");
                }
                Parent root = FXMLLoader.load(location);
                stage.setScene(new Scene(root));
                stage.show();
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Navigation Error", 
                    "Could not return to login view: " + e.getMessage());
            }
        }
    
}