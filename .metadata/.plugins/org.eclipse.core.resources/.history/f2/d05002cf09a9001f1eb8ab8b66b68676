package dao;

import models.UserLogin;
import dao.DBConnect;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserLoginDao {

    public UserLoginDao() {
        createTableIfNotExists();
    }

    private void createTableIfNotExists() {
    	
    	System.out.println("Connecting to database to create Table..."); 
    	System.out.println("Connected database successfully..."); 
    	    
    	   //Execute create query 
    	System.out.println("Creating table in given database...");
        String createTableSQL = "CREATE TABLE IF NOT EXISTS fptest1 (" +
                "id BIGINT AUTO_INCREMENT PRIMARY KEY, " +
                "first_name VARCHAR(50) NOT NULL, " +
                "last_name VARCHAR(50) NOT NULL, " +
                "email VARCHAR(100) UNIQUE NOT NULL, " +
                "password VARCHAR(100) NOT NULL, " +
                "phone_number VARCHAR(15), " +
                "street_address VARCHAR(255), " +
                "security_question VARCHAR(255), " +
                "security_answer VARCHAR(255), " +
                "role VARCHAR(20) DEFAULT 'user'" +
                ")";

        try (Connection conn = DBConnect.getconnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute(createTableSQL);
            System.out.println("Users table created or already exists.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public UserLogin findByEmail(String email) {
        String query = "SELECT * FROM fptest1 WHERE email = ?";
        try (Connection conn = DBConnect.getconnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return new UserLogin(rs.getLong("id"), rs.getString("first_name"), rs.getString("last_name"),
                                rs.getString("email"), rs.getString("password"), rs.getString("phone_number"),
                                rs.getString("street_address"), rs.getString("security_question"),
                                rs.getString("security_answer"), rs.getString("role"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public boolean save(UserLogin user) {
        String query = "INSERT INTO fptest1 (first_name, last_name, email, password, phone_number, " +
                       "street_address, security_question, security_answer, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DBConnect.getconnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, user.getFirstName());
            pstmt.setString(2, user.getLastName());
            pstmt.setString(3, user.getEmail());
            pstmt.setString(4, user.getPassword());
            pstmt.setString(5, user.getPhoneNumber());
            pstmt.setString(6, user.getStreetAddress());
            pstmt.setString(7, user.getSecurityQuestion());
            pstmt.setString(8, user.getSecurityAnswer());
            pstmt.setString(9, user.getRole());
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

     public boolean update(UserLogin user) {
         String query = "UPDATE fptest1 SET first_name=?, last_name=?, email=?, password=?, phone_number=?, " +
                        "street_address=?, security_question=?, security_answer=?, role=? WHERE id=?";
         try (Connection conn = DBConnect.getconnection();
              PreparedStatement pstmt = conn.prepareStatement(query)) {
             pstmt.setString(1, user.getFirstName());
             pstmt.setString(2, user.getLastName());
             pstmt.setString(3, user.getEmail());
             pstmt.setString(4, user.getPassword());
             pstmt.setString(5, user.getPhoneNumber());
             pstmt.setString(6, user.getStreetAddress());
             pstmt.setString(7, user.getSecurityQuestion());
             pstmt.setString(8, user.getSecurityAnswer());
             pstmt.setString(9, user.getRole());
             pstmt.setLong(10, user.getId());
             int rowsAffected = pstmt.executeUpdate();
             return rowsAffected > 0;
         } catch (SQLException e) {
             e.printStackTrace();
             return false;
         }
     }

     public boolean delete(Long id) {
         String query = "DELETE FROM fptest1 WHERE id=?";
         try (Connection conn = DBConnect.getconnection();
              PreparedStatement pstmt = conn.prepareStatement(query)) {
             pstmt.setLong(1, id);
             int rowsAffected = pstmt.executeUpdate();
             return rowsAffected > 0;
         } catch (SQLException e) {
             e.printStackTrace();
             return false;
         }
     }

     public List<UserLogin> findAll() {
         List<UserLogin> users = new ArrayList<>();
         String query = "SELECT * FROM fptest1";
         try (Connection conn = DBConnect.getconnection();
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery(query)) {
             while (rs.next()) {
                 users.add(new UserLogin(rs.getLong("id"), rs.getString("first_name"), rs.getString("last_name"),
                                    rs.getString("email"), rs.getString("password"), rs.getString("phone_number"),
                                    rs.getString("street_address"), rs.getString("security_question"),
                                    rs.getString("security_answer"), rs.getString("role")));
             }
         } catch (SQLException e) {
             e.printStackTrace();
         }
         return users;
     }

}
